{"ast":null,"code":"import { microSeconds as micro } from '../util';\nexport var microSeconds = micro;\nexport var type = 'simulate';\nvar SIMULATE_CHANNELS = new Set();\nexport function create(channelName) {\n  var state = {\n    name: channelName,\n    messagesCallback: null\n  };\n  SIMULATE_CHANNELS.add(state);\n  return state;\n}\nexport function close(channelState) {\n  SIMULATE_CHANNELS[\"delete\"](channelState);\n}\nexport function postMessage(channelState, messageJson) {\n  return new Promise(function (res) {\n    return setTimeout(function () {\n      var channelArray = Array.from(SIMULATE_CHANNELS);\n      channelArray.filter(function (channel) {\n        return channel.name === channelState.name;\n      }).filter(function (channel) {\n        return channel !== channelState;\n      }).filter(function (channel) {\n        return !!channel.messagesCallback;\n      }).forEach(function (channel) {\n        return channel.messagesCallback(messageJson);\n      });\n      res();\n    }, 5);\n  });\n}\nexport function onMessage(channelState, fn) {\n  channelState.messagesCallback = fn;\n}\nexport function canBeUsed() {\n  return true;\n}\nexport function averageResponseTime() {\n  return 5;\n}\nexport default {\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n};","map":{"version":3,"sources":["C:/Users/dangk/Documents/webFullstack/frontendReactJS/Frontend-React.JS-QuickStart/node_modules/broadcast-channel/dist/es/methods/simulate.js"],"names":["microSeconds","micro","type","SIMULATE_CHANNELS","Set","create","channelName","state","name","messagesCallback","add","close","channelState","postMessage","messageJson","Promise","res","setTimeout","channelArray","Array","from","filter","channel","forEach","onMessage","fn","canBeUsed","averageResponseTime"],"mappings":"AAAA,SAASA,YAAY,IAAIC,KAAzB,QAAsC,SAAtC;AACA,OAAO,IAAID,YAAY,GAAGC,KAAnB;AACP,OAAO,IAAIC,IAAI,GAAG,UAAX;AACP,IAAIC,iBAAiB,GAAG,IAAIC,GAAJ,EAAxB;AACA,OAAO,SAASC,MAAT,CAAgBC,WAAhB,EAA6B;AAClC,MAAIC,KAAK,GAAG;AACVC,IAAAA,IAAI,EAAEF,WADI;AAEVG,IAAAA,gBAAgB,EAAE;AAFR,GAAZ;AAIAN,EAAAA,iBAAiB,CAACO,GAAlB,CAAsBH,KAAtB;AACA,SAAOA,KAAP;AACD;AACD,OAAO,SAASI,KAAT,CAAeC,YAAf,EAA6B;AAClCT,EAAAA,iBAAiB,CAAC,QAAD,CAAjB,CAA4BS,YAA5B;AACD;AACD,OAAO,SAASC,WAAT,CAAqBD,YAArB,EAAmCE,WAAnC,EAAgD;AACrD,SAAO,IAAIC,OAAJ,CAAY,UAAUC,GAAV,EAAe;AAChC,WAAOC,UAAU,CAAC,YAAY;AAC5B,UAAIC,YAAY,GAAGC,KAAK,CAACC,IAAN,CAAWjB,iBAAX,CAAnB;AACAe,MAAAA,YAAY,CAACG,MAAb,CAAoB,UAAUC,OAAV,EAAmB;AACrC,eAAOA,OAAO,CAACd,IAAR,KAAiBI,YAAY,CAACJ,IAArC;AACD,OAFD,EAEGa,MAFH,CAEU,UAAUC,OAAV,EAAmB;AAC3B,eAAOA,OAAO,KAAKV,YAAnB;AACD,OAJD,EAIGS,MAJH,CAIU,UAAUC,OAAV,EAAmB;AAC3B,eAAO,CAAC,CAACA,OAAO,CAACb,gBAAjB;AACD,OAND,EAMGc,OANH,CAMW,UAAUD,OAAV,EAAmB;AAC5B,eAAOA,OAAO,CAACb,gBAAR,CAAyBK,WAAzB,CAAP;AACD,OARD;AASAE,MAAAA,GAAG;AACJ,KAZgB,EAYd,CAZc,CAAjB;AAaD,GAdM,CAAP;AAeD;AACD,OAAO,SAASQ,SAAT,CAAmBZ,YAAnB,EAAiCa,EAAjC,EAAqC;AAC1Cb,EAAAA,YAAY,CAACH,gBAAb,GAAgCgB,EAAhC;AACD;AACD,OAAO,SAASC,SAAT,GAAqB;AAC1B,SAAO,IAAP;AACD;AACD,OAAO,SAASC,mBAAT,GAA+B;AACpC,SAAO,CAAP;AACD;AACD,eAAe;AACbtB,EAAAA,MAAM,EAAEA,MADK;AAEbM,EAAAA,KAAK,EAAEA,KAFM;AAGba,EAAAA,SAAS,EAAEA,SAHE;AAIbX,EAAAA,WAAW,EAAEA,WAJA;AAKba,EAAAA,SAAS,EAAEA,SALE;AAMbxB,EAAAA,IAAI,EAAEA,IANO;AAObyB,EAAAA,mBAAmB,EAAEA,mBAPR;AAQb3B,EAAAA,YAAY,EAAEA;AARD,CAAf","sourcesContent":["import { microSeconds as micro } from '../util';\r\nexport var microSeconds = micro;\r\nexport var type = 'simulate';\r\nvar SIMULATE_CHANNELS = new Set();\r\nexport function create(channelName) {\r\n  var state = {\r\n    name: channelName,\r\n    messagesCallback: null\r\n  };\r\n  SIMULATE_CHANNELS.add(state);\r\n  return state;\r\n}\r\nexport function close(channelState) {\r\n  SIMULATE_CHANNELS[\"delete\"](channelState);\r\n}\r\nexport function postMessage(channelState, messageJson) {\r\n  return new Promise(function (res) {\r\n    return setTimeout(function () {\r\n      var channelArray = Array.from(SIMULATE_CHANNELS);\r\n      channelArray.filter(function (channel) {\r\n        return channel.name === channelState.name;\r\n      }).filter(function (channel) {\r\n        return channel !== channelState;\r\n      }).filter(function (channel) {\r\n        return !!channel.messagesCallback;\r\n      }).forEach(function (channel) {\r\n        return channel.messagesCallback(messageJson);\r\n      });\r\n      res();\r\n    }, 5);\r\n  });\r\n}\r\nexport function onMessage(channelState, fn) {\r\n  channelState.messagesCallback = fn;\r\n}\r\nexport function canBeUsed() {\r\n  return true;\r\n}\r\nexport function averageResponseTime() {\r\n  return 5;\r\n}\r\nexport default {\r\n  create: create,\r\n  close: close,\r\n  onMessage: onMessage,\r\n  postMessage: postMessage,\r\n  canBeUsed: canBeUsed,\r\n  type: type,\r\n  averageResponseTime: averageResponseTime,\r\n  microSeconds: microSeconds\r\n};"]},"metadata":{},"sourceType":"module"}