{"ast":null,"code":"/**\r\n * this method uses indexeddb to store the messages\r\n * There is currently no observerAPI for idb\r\n * @link https://github.com/w3c/IndexedDB/issues/51\r\n */\nimport { sleep, randomInt, randomToken, microSeconds as micro, isNode } from '../util.js';\nexport var microSeconds = micro;\nimport ObliviousSet from '../oblivious-set';\nimport { fillOptionsWithDefaults } from '../options';\nvar DB_PREFIX = 'pubkey.broadcast-channel-0-';\nvar OBJECT_STORE_ID = 'messages';\nexport var type = 'idb';\nexport function getIdb() {\n  if (typeof indexedDB !== 'undefined') return indexedDB;\n  if (typeof window.mozIndexedDB !== 'undefined') return window.mozIndexedDB;\n  if (typeof window.webkitIndexedDB !== 'undefined') return window.webkitIndexedDB;\n  if (typeof window.msIndexedDB !== 'undefined') return window.msIndexedDB;\n  return false;\n}\nexport function createDatabase(channelName) {\n  var IndexedDB = getIdb(); // create table\n\n  var dbName = DB_PREFIX + channelName;\n  var openRequest = IndexedDB.open(dbName, 1);\n\n  openRequest.onupgradeneeded = function (ev) {\n    var db = ev.target.result;\n    db.createObjectStore(OBJECT_STORE_ID, {\n      keyPath: 'id',\n      autoIncrement: true\n    });\n  };\n\n  var dbPromise = new Promise(function (res, rej) {\n    openRequest.onerror = function (ev) {\n      return rej(ev);\n    };\n\n    openRequest.onsuccess = function () {\n      res(openRequest.result);\n    };\n  });\n  return dbPromise;\n}\n/**\r\n * writes the new message to the database\r\n * so other readers can find it\r\n */\n\nexport function writeMessage(db, readerUuid, messageJson) {\n  var time = new Date().getTime();\n  var writeObject = {\n    uuid: readerUuid,\n    time: time,\n    data: messageJson\n  };\n  var transaction = db.transaction([OBJECT_STORE_ID], 'readwrite');\n  return new Promise(function (res, rej) {\n    transaction.oncomplete = function () {\n      return res();\n    };\n\n    transaction.onerror = function (ev) {\n      return rej(ev);\n    };\n\n    var objectStore = transaction.objectStore(OBJECT_STORE_ID);\n    objectStore.add(writeObject);\n  });\n}\nexport function getAllMessages(db) {\n  var objectStore = db.transaction(OBJECT_STORE_ID).objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        ret.push(cursor.value); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n        cursor[\"continue\"]();\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\nexport function getMessagesHigherThen(db, lastCursorId) {\n  var objectStore = db.transaction(OBJECT_STORE_ID).objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  var keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n  return new Promise(function (res) {\n    objectStore.openCursor(keyRangeValue).onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        ret.push(cursor.value);\n        cursor[\"continue\"]();\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\nexport function removeMessageById(db, id) {\n  var request = db.transaction([OBJECT_STORE_ID], 'readwrite').objectStore(OBJECT_STORE_ID)[\"delete\"](id);\n  return new Promise(function (res) {\n    request.onsuccess = function () {\n      return res();\n    };\n  });\n}\nexport function getOldMessages(db, ttl) {\n  var olderThen = new Date().getTime() - ttl;\n  var objectStore = db.transaction(OBJECT_STORE_ID).objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        var msgObk = cursor.value;\n\n        if (msgObk.time < olderThen) {\n          ret.push(msgObk); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n          cursor[\"continue\"]();\n        } else {\n          // no more old messages,\n          res(ret);\n          return;\n        }\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\nexport function cleanOldMessages(db, ttl) {\n  return getOldMessages(db, ttl).then(function (tooOld) {\n    return Promise.all(tooOld.map(function (msgObj) {\n      return removeMessageById(db, msgObj.id);\n    }));\n  });\n}\nexport function create(channelName, options) {\n  options = fillOptionsWithDefaults(options);\n  return createDatabase(channelName).then(function (db) {\n    var state = {\n      closed: false,\n      lastCursorId: 0,\n      channelName: channelName,\n      options: options,\n      uuid: randomToken(10),\n\n      /**\r\n       * emittedMessagesIds\r\n       * contains all messages that have been emitted before\r\n       * @type {ObliviousSet}\r\n       */\n      eMIs: new ObliviousSet(options.idb.ttl * 2),\n      // ensures we do not read messages in parrallel\n      writeBlockPromise: Promise.resolve(),\n      messagesCallback: null,\n      readQueuePromises: [],\n      db: db\n    };\n    /**\r\n     * if service-workers are used,\r\n     * we have no 'storage'-event if they post a message,\r\n     * therefore we also have to set an interval\r\n     */\n\n    _readLoop(state);\n\n    return state;\n  });\n}\n\nfunction _readLoop(state) {\n  if (state.closed) return;\n  return readNewMessages(state).then(function () {\n    return sleep(state.options.idb.fallbackInterval);\n  }).then(function () {\n    return _readLoop(state);\n  });\n}\n\nfunction _filterMessage(msgObj, state) {\n  if (msgObj.uuid === state.uuid) return false; // send by own\n\n  if (state.eMIs.has(msgObj.id)) return false; // already emitted\n\n  if (msgObj.data.time < state.messagesCallbackTime) return false; // older then onMessageCallback\n\n  return true;\n}\n/**\r\n * reads all new messages from the database and emits them\r\n */\n\n\nfunction readNewMessages(state) {\n  // channel already closed\n  if (state.closed) return Promise.resolve(); // if no one is listening, we do not need to scan for new messages\n\n  if (!state.messagesCallback) return Promise.resolve();\n  return getMessagesHigherThen(state.db, state.lastCursorId).then(function (newerMessages) {\n    var useMessages = newerMessages\n    /**\r\n     * there is a bug in iOS where the msgObj can be undefined some times\r\n     * so we filter them out\r\n     * @link https://github.com/pubkey/broadcast-channel/issues/19\r\n     */\n    .filter(function (msgObj) {\n      return !!msgObj;\n    }).map(function (msgObj) {\n      if (msgObj.id > state.lastCursorId) {\n        state.lastCursorId = msgObj.id;\n      }\n\n      return msgObj;\n    }).filter(function (msgObj) {\n      return _filterMessage(msgObj, state);\n    }).sort(function (msgObjA, msgObjB) {\n      return msgObjA.time - msgObjB.time;\n    }); // sort by time\n\n    useMessages.forEach(function (msgObj) {\n      if (state.messagesCallback) {\n        state.eMIs.add(msgObj.id);\n        state.messagesCallback(msgObj.data);\n      }\n    });\n    return Promise.resolve();\n  });\n}\n\nexport function close(channelState) {\n  channelState.closed = true;\n  channelState.db.close();\n}\nexport function postMessage(channelState, messageJson) {\n  channelState.writeBlockPromise = channelState.writeBlockPromise.then(function () {\n    return writeMessage(channelState.db, channelState.uuid, messageJson);\n  }).then(function () {\n    if (randomInt(0, 10) === 0) {\n      /* await (do not await) */\n      cleanOldMessages(channelState.db, channelState.options.idb.ttl);\n    }\n  });\n  return channelState.writeBlockPromise;\n}\nexport function onMessage(channelState, fn, time) {\n  channelState.messagesCallbackTime = time;\n  channelState.messagesCallback = fn;\n  readNewMessages(channelState);\n}\nexport function canBeUsed() {\n  if (isNode) return false;\n  var idb = getIdb();\n  if (!idb) return false;\n  return true;\n}\nexport function averageResponseTime(options) {\n  return options.idb.fallbackInterval * 2;\n}\nexport default {\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n};","map":{"version":3,"sources":["C:/Users/ADMIN/Documents/webFullstack/frontendReactJS/Frontend-React.JS-QuickStart/node_modules/broadcast-channel/dist/es/methods/indexed-db.js"],"names":["sleep","randomInt","randomToken","microSeconds","micro","isNode","ObliviousSet","fillOptionsWithDefaults","DB_PREFIX","OBJECT_STORE_ID","type","getIdb","indexedDB","window","mozIndexedDB","webkitIndexedDB","msIndexedDB","createDatabase","channelName","IndexedDB","dbName","openRequest","open","onupgradeneeded","ev","db","target","result","createObjectStore","keyPath","autoIncrement","dbPromise","Promise","res","rej","onerror","onsuccess","writeMessage","readerUuid","messageJson","time","Date","getTime","writeObject","uuid","data","transaction","oncomplete","objectStore","add","getAllMessages","ret","openCursor","cursor","push","value","getMessagesHigherThen","lastCursorId","keyRangeValue","IDBKeyRange","bound","Infinity","removeMessageById","id","request","getOldMessages","ttl","olderThen","msgObk","cleanOldMessages","then","tooOld","all","map","msgObj","create","options","state","closed","eMIs","idb","writeBlockPromise","resolve","messagesCallback","readQueuePromises","_readLoop","readNewMessages","fallbackInterval","_filterMessage","has","messagesCallbackTime","newerMessages","useMessages","filter","sort","msgObjA","msgObjB","forEach","close","channelState","postMessage","onMessage","fn","canBeUsed","averageResponseTime"],"mappings":"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","sourcesContent":["/**\r\n * this method uses indexeddb to store the messages\r\n * There is currently no observerAPI for idb\r\n * @link https://github.com/w3c/IndexedDB/issues/51\r\n */\r\nimport { sleep, randomInt, randomToken, microSeconds as micro, isNode } from '../util.js';\r\nexport var microSeconds = micro;\r\nimport ObliviousSet from '../oblivious-set';\r\nimport { fillOptionsWithDefaults } from '../options';\r\nvar DB_PREFIX = 'pubkey.broadcast-channel-0-';\r\nvar OBJECT_STORE_ID = 'messages';\r\nexport var type = 'idb';\r\nexport function getIdb() {\r\n  if (typeof indexedDB !== 'undefined') return indexedDB;\r\n  if (typeof window.mozIndexedDB !== 'undefined') return window.mozIndexedDB;\r\n  if (typeof window.webkitIndexedDB !== 'undefined') return window.webkitIndexedDB;\r\n  if (typeof window.msIndexedDB !== 'undefined') return window.msIndexedDB;\r\n  return false;\r\n}\r\nexport function createDatabase(channelName) {\r\n  var IndexedDB = getIdb(); // create table\r\n\r\n  var dbName = DB_PREFIX + channelName;\r\n  var openRequest = IndexedDB.open(dbName, 1);\r\n\r\n  openRequest.onupgradeneeded = function (ev) {\r\n    var db = ev.target.result;\r\n    db.createObjectStore(OBJECT_STORE_ID, {\r\n      keyPath: 'id',\r\n      autoIncrement: true\r\n    });\r\n  };\r\n\r\n  var dbPromise = new Promise(function (res, rej) {\r\n    openRequest.onerror = function (ev) {\r\n      return rej(ev);\r\n    };\r\n\r\n    openRequest.onsuccess = function () {\r\n      res(openRequest.result);\r\n    };\r\n  });\r\n  return dbPromise;\r\n}\r\n/**\r\n * writes the new message to the database\r\n * so other readers can find it\r\n */\r\n\r\nexport function writeMessage(db, readerUuid, messageJson) {\r\n  var time = new Date().getTime();\r\n  var writeObject = {\r\n    uuid: readerUuid,\r\n    time: time,\r\n    data: messageJson\r\n  };\r\n  var transaction = db.transaction([OBJECT_STORE_ID], 'readwrite');\r\n  return new Promise(function (res, rej) {\r\n    transaction.oncomplete = function () {\r\n      return res();\r\n    };\r\n\r\n    transaction.onerror = function (ev) {\r\n      return rej(ev);\r\n    };\r\n\r\n    var objectStore = transaction.objectStore(OBJECT_STORE_ID);\r\n    objectStore.add(writeObject);\r\n  });\r\n}\r\nexport function getAllMessages(db) {\r\n  var objectStore = db.transaction(OBJECT_STORE_ID).objectStore(OBJECT_STORE_ID);\r\n  var ret = [];\r\n  return new Promise(function (res) {\r\n    objectStore.openCursor().onsuccess = function (ev) {\r\n      var cursor = ev.target.result;\r\n\r\n      if (cursor) {\r\n        ret.push(cursor.value); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\r\n\r\n        cursor[\"continue\"]();\r\n      } else {\r\n        res(ret);\r\n      }\r\n    };\r\n  });\r\n}\r\nexport function getMessagesHigherThen(db, lastCursorId) {\r\n  var objectStore = db.transaction(OBJECT_STORE_ID).objectStore(OBJECT_STORE_ID);\r\n  var ret = [];\r\n  var keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\r\n  return new Promise(function (res) {\r\n    objectStore.openCursor(keyRangeValue).onsuccess = function (ev) {\r\n      var cursor = ev.target.result;\r\n\r\n      if (cursor) {\r\n        ret.push(cursor.value);\r\n        cursor[\"continue\"]();\r\n      } else {\r\n        res(ret);\r\n      }\r\n    };\r\n  });\r\n}\r\nexport function removeMessageById(db, id) {\r\n  var request = db.transaction([OBJECT_STORE_ID], 'readwrite').objectStore(OBJECT_STORE_ID)[\"delete\"](id);\r\n  return new Promise(function (res) {\r\n    request.onsuccess = function () {\r\n      return res();\r\n    };\r\n  });\r\n}\r\nexport function getOldMessages(db, ttl) {\r\n  var olderThen = new Date().getTime() - ttl;\r\n  var objectStore = db.transaction(OBJECT_STORE_ID).objectStore(OBJECT_STORE_ID);\r\n  var ret = [];\r\n  return new Promise(function (res) {\r\n    objectStore.openCursor().onsuccess = function (ev) {\r\n      var cursor = ev.target.result;\r\n\r\n      if (cursor) {\r\n        var msgObk = cursor.value;\r\n\r\n        if (msgObk.time < olderThen) {\r\n          ret.push(msgObk); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\r\n\r\n          cursor[\"continue\"]();\r\n        } else {\r\n          // no more old messages,\r\n          res(ret);\r\n          return;\r\n        }\r\n      } else {\r\n        res(ret);\r\n      }\r\n    };\r\n  });\r\n}\r\nexport function cleanOldMessages(db, ttl) {\r\n  return getOldMessages(db, ttl).then(function (tooOld) {\r\n    return Promise.all(tooOld.map(function (msgObj) {\r\n      return removeMessageById(db, msgObj.id);\r\n    }));\r\n  });\r\n}\r\nexport function create(channelName, options) {\r\n  options = fillOptionsWithDefaults(options);\r\n  return createDatabase(channelName).then(function (db) {\r\n    var state = {\r\n      closed: false,\r\n      lastCursorId: 0,\r\n      channelName: channelName,\r\n      options: options,\r\n      uuid: randomToken(10),\r\n\r\n      /**\r\n       * emittedMessagesIds\r\n       * contains all messages that have been emitted before\r\n       * @type {ObliviousSet}\r\n       */\r\n      eMIs: new ObliviousSet(options.idb.ttl * 2),\r\n      // ensures we do not read messages in parrallel\r\n      writeBlockPromise: Promise.resolve(),\r\n      messagesCallback: null,\r\n      readQueuePromises: [],\r\n      db: db\r\n    };\r\n    /**\r\n     * if service-workers are used,\r\n     * we have no 'storage'-event if they post a message,\r\n     * therefore we also have to set an interval\r\n     */\r\n\r\n    _readLoop(state);\r\n\r\n    return state;\r\n  });\r\n}\r\n\r\nfunction _readLoop(state) {\r\n  if (state.closed) return;\r\n  return readNewMessages(state).then(function () {\r\n    return sleep(state.options.idb.fallbackInterval);\r\n  }).then(function () {\r\n    return _readLoop(state);\r\n  });\r\n}\r\n\r\nfunction _filterMessage(msgObj, state) {\r\n  if (msgObj.uuid === state.uuid) return false; // send by own\r\n\r\n  if (state.eMIs.has(msgObj.id)) return false; // already emitted\r\n\r\n  if (msgObj.data.time < state.messagesCallbackTime) return false; // older then onMessageCallback\r\n\r\n  return true;\r\n}\r\n/**\r\n * reads all new messages from the database and emits them\r\n */\r\n\r\n\r\nfunction readNewMessages(state) {\r\n  // channel already closed\r\n  if (state.closed) return Promise.resolve(); // if no one is listening, we do not need to scan for new messages\r\n\r\n  if (!state.messagesCallback) return Promise.resolve();\r\n  return getMessagesHigherThen(state.db, state.lastCursorId).then(function (newerMessages) {\r\n    var useMessages = newerMessages\r\n    /**\r\n     * there is a bug in iOS where the msgObj can be undefined some times\r\n     * so we filter them out\r\n     * @link https://github.com/pubkey/broadcast-channel/issues/19\r\n     */\r\n    .filter(function (msgObj) {\r\n      return !!msgObj;\r\n    }).map(function (msgObj) {\r\n      if (msgObj.id > state.lastCursorId) {\r\n        state.lastCursorId = msgObj.id;\r\n      }\r\n\r\n      return msgObj;\r\n    }).filter(function (msgObj) {\r\n      return _filterMessage(msgObj, state);\r\n    }).sort(function (msgObjA, msgObjB) {\r\n      return msgObjA.time - msgObjB.time;\r\n    }); // sort by time\r\n\r\n    useMessages.forEach(function (msgObj) {\r\n      if (state.messagesCallback) {\r\n        state.eMIs.add(msgObj.id);\r\n        state.messagesCallback(msgObj.data);\r\n      }\r\n    });\r\n    return Promise.resolve();\r\n  });\r\n}\r\n\r\nexport function close(channelState) {\r\n  channelState.closed = true;\r\n  channelState.db.close();\r\n}\r\nexport function postMessage(channelState, messageJson) {\r\n  channelState.writeBlockPromise = channelState.writeBlockPromise.then(function () {\r\n    return writeMessage(channelState.db, channelState.uuid, messageJson);\r\n  }).then(function () {\r\n    if (randomInt(0, 10) === 0) {\r\n      /* await (do not await) */\r\n      cleanOldMessages(channelState.db, channelState.options.idb.ttl);\r\n    }\r\n  });\r\n  return channelState.writeBlockPromise;\r\n}\r\nexport function onMessage(channelState, fn, time) {\r\n  channelState.messagesCallbackTime = time;\r\n  channelState.messagesCallback = fn;\r\n  readNewMessages(channelState);\r\n}\r\nexport function canBeUsed() {\r\n  if (isNode) return false;\r\n  var idb = getIdb();\r\n  if (!idb) return false;\r\n  return true;\r\n}\r\nexport function averageResponseTime(options) {\r\n  return options.idb.fallbackInterval * 2;\r\n}\r\nexport default {\r\n  create: create,\r\n  close: close,\r\n  onMessage: onMessage,\r\n  postMessage: postMessage,\r\n  canBeUsed: canBeUsed,\r\n  type: type,\r\n  averageResponseTime: averageResponseTime,\r\n  microSeconds: microSeconds\r\n};"]},"metadata":{},"sourceType":"module"}