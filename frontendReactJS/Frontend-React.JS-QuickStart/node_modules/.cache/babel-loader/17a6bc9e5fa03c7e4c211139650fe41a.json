{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { filterProps } from './utils';\nimport { FormatError, ErrorCode } from 'intl-messageformat';\nimport { IntlError, IntlErrorCode } from './error';\nvar LIST_FORMAT_OPTIONS = ['localeMatcher', 'type', 'style'];\nvar now = Date.now();\n\nfunction generateToken(i) {\n  return now + \"_\" + i + \"_\" + now;\n}\n\nexport function formatList(opts, getListFormat, values, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var results = formatListToParts(opts, getListFormat, values, options).reduce(function (all, el) {\n    var val = el.value;\n\n    if (typeof val !== 'string') {\n      all.push(val);\n    } else if (typeof all[all.length - 1] === 'string') {\n      all[all.length - 1] += val;\n    } else {\n      all.push(val);\n    }\n\n    return all;\n  }, []);\n  return results.length === 1 ? results[0] : results;\n}\nexport function formatListToParts(_a, getListFormat, values, options) {\n  var locale = _a.locale,\n      onError = _a.onError;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var ListFormat = Intl.ListFormat;\n\n  if (!ListFormat) {\n    onError(new FormatError(\"Intl.ListFormat is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-listformat\\\"\\n\", ErrorCode.MISSING_INTL_API));\n  }\n\n  var filteredOptions = filterProps(options, LIST_FORMAT_OPTIONS);\n\n  try {\n    var richValues_1 = {};\n    var serializedValues = values.map(function (v, i) {\n      if (typeof v === 'object') {\n        var id = generateToken(i);\n        richValues_1[id] = v;\n        return id;\n      }\n\n      return String(v);\n    });\n    return getListFormat(locale, filteredOptions).formatToParts(serializedValues).map(function (part) {\n      return part.type === 'literal' ? part : __assign(__assign({}, part), {\n        value: richValues_1[part.value] || part.value\n      });\n    });\n  } catch (e) {\n    onError(new IntlError(IntlErrorCode.FORMAT_ERROR, 'Error formatting list.', e));\n  } // @ts-ignore\n\n\n  return values;\n}","map":{"version":3,"sources":["C:/Users/ADMIN/Documents/webFullstack/frontendReactJS/Frontend-React.JS-QuickStart/node_modules/@formatjs/intl/lib/src/list.js"],"names":["__assign","filterProps","FormatError","ErrorCode","IntlError","IntlErrorCode","LIST_FORMAT_OPTIONS","now","Date","generateToken","i","formatList","opts","getListFormat","values","options","results","formatListToParts","reduce","all","el","val","value","push","length","_a","locale","onError","ListFormat","Intl","MISSING_INTL_API","filteredOptions","richValues_1","serializedValues","map","v","id","String","formatToParts","part","type","e","FORMAT_ERROR"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\r\nimport { filterProps } from './utils';\r\nimport { FormatError, ErrorCode } from 'intl-messageformat';\r\nimport { IntlError, IntlErrorCode } from './error';\r\nvar LIST_FORMAT_OPTIONS = [\r\n    'localeMatcher',\r\n    'type',\r\n    'style',\r\n];\r\nvar now = Date.now();\r\nfunction generateToken(i) {\r\n    return now + \"_\" + i + \"_\" + now;\r\n}\r\nexport function formatList(opts, getListFormat, values, options) {\r\n    if (options === void 0) { options = {}; }\r\n    var results = formatListToParts(opts, getListFormat, values, options).reduce(function (all, el) {\r\n        var val = el.value;\r\n        if (typeof val !== 'string') {\r\n            all.push(val);\r\n        }\r\n        else if (typeof all[all.length - 1] === 'string') {\r\n            all[all.length - 1] += val;\r\n        }\r\n        else {\r\n            all.push(val);\r\n        }\r\n        return all;\r\n    }, []);\r\n    return results.length === 1 ? results[0] : results;\r\n}\r\nexport function formatListToParts(_a, getListFormat, values, options) {\r\n    var locale = _a.locale, onError = _a.onError;\r\n    if (options === void 0) { options = {}; }\r\n    var ListFormat = Intl.ListFormat;\r\n    if (!ListFormat) {\r\n        onError(new FormatError(\"Intl.ListFormat is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-listformat\\\"\\n\", ErrorCode.MISSING_INTL_API));\r\n    }\r\n    var filteredOptions = filterProps(options, LIST_FORMAT_OPTIONS);\r\n    try {\r\n        var richValues_1 = {};\r\n        var serializedValues = values.map(function (v, i) {\r\n            if (typeof v === 'object') {\r\n                var id = generateToken(i);\r\n                richValues_1[id] = v;\r\n                return id;\r\n            }\r\n            return String(v);\r\n        });\r\n        return getListFormat(locale, filteredOptions)\r\n            .formatToParts(serializedValues)\r\n            .map(function (part) {\r\n            return part.type === 'literal'\r\n                ? part\r\n                : __assign(__assign({}, part), { value: richValues_1[part.value] || part.value });\r\n        });\r\n    }\r\n    catch (e) {\r\n        onError(new IntlError(IntlErrorCode.FORMAT_ERROR, 'Error formatting list.', e));\r\n    }\r\n    // @ts-ignore\r\n    return values;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}