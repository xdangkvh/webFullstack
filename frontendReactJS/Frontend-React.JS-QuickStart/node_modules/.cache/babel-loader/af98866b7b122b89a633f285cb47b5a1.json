{"ast":null,"code":"/*\r\n * Copyright 2015, Yahoo Inc.\r\n * Copyrights licensed under the New BSD License.\r\n * See the accompanying LICENSE file for terms.\r\n */\nimport { __assign, __extends, __rest, __spreadArray } from \"tslib\";\nimport * as React from 'react';\nimport { Provider } from './injectIntl';\nimport { DEFAULT_INTL_CONFIG, invariantIntlContext, assignUniqueKeysToParts, shallowEqual } from '../utils';\nimport { formatMessage as coreFormatMessage, createIntl as coreCreateIntl, createIntlCache } from '@formatjs/intl';\nimport { isFormatXMLElementFn } from 'intl-messageformat';\n\nfunction processIntlConfig(config) {\n  return {\n    locale: config.locale,\n    timeZone: config.timeZone,\n    formats: config.formats,\n    textComponent: config.textComponent,\n    messages: config.messages,\n    defaultLocale: config.defaultLocale,\n    defaultFormats: config.defaultFormats,\n    onError: config.onError,\n    wrapRichTextChunksInFragment: config.wrapRichTextChunksInFragment,\n    defaultRichTextElements: config.defaultRichTextElements\n  };\n}\n\nfunction assignUniqueKeysToFormatXMLElementFnArgument(values) {\n  if (!values) {\n    return values;\n  }\n\n  return Object.keys(values).reduce(function (acc, k) {\n    var v = values[k];\n    acc[k] = isFormatXMLElementFn(v) ? assignUniqueKeysToParts(v) : v;\n    return acc;\n  }, {});\n}\n\nvar formatMessage = function (config, formatters, descriptor, rawValues) {\n  var rest = [];\n\n  for (var _i = 4; _i < arguments.length; _i++) {\n    rest[_i - 4] = arguments[_i];\n  }\n\n  var values = assignUniqueKeysToFormatXMLElementFnArgument(rawValues);\n  var chunks = coreFormatMessage.apply(void 0, __spreadArray([config, formatters, descriptor, values], rest));\n\n  if (Array.isArray(chunks)) {\n    return React.Children.toArray(chunks);\n  }\n\n  return chunks;\n};\n/**\r\n * Create intl object\r\n * @param config intl config\r\n * @param cache cache for formatter instances to prevent memory leak\r\n */\n\n\nexport var createIntl = function (_a, cache) {\n  var rawDefaultRichTextElements = _a.defaultRichTextElements,\n      config = __rest(_a, [\"defaultRichTextElements\"]);\n\n  var defaultRichTextElements = assignUniqueKeysToFormatXMLElementFnArgument(rawDefaultRichTextElements);\n  var coreIntl = coreCreateIntl(__assign(__assign(__assign({}, DEFAULT_INTL_CONFIG), config), {\n    defaultRichTextElements: defaultRichTextElements\n  }), cache);\n  return __assign(__assign({}, coreIntl), {\n    formatMessage: formatMessage.bind(null, {\n      locale: coreIntl.locale,\n      timeZone: coreIntl.timeZone,\n      formats: coreIntl.formats,\n      defaultLocale: coreIntl.defaultLocale,\n      defaultFormats: coreIntl.defaultFormats,\n      messages: coreIntl.messages,\n      onError: coreIntl.onError,\n      defaultRichTextElements: defaultRichTextElements\n    }, coreIntl.formatters)\n  });\n};\n\nvar IntlProvider =\n/** @class */\nfunction (_super) {\n  __extends(IntlProvider, _super);\n\n  function IntlProvider() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.cache = createIntlCache();\n    _this.state = {\n      cache: _this.cache,\n      intl: createIntl(processIntlConfig(_this.props), _this.cache),\n      prevConfig: processIntlConfig(_this.props)\n    };\n    return _this;\n  }\n\n  IntlProvider.getDerivedStateFromProps = function (props, _a) {\n    var prevConfig = _a.prevConfig,\n        cache = _a.cache;\n    var config = processIntlConfig(props);\n\n    if (!shallowEqual(prevConfig, config)) {\n      return {\n        intl: createIntl(config, cache),\n        prevConfig: config\n      };\n    }\n\n    return null;\n  };\n\n  IntlProvider.prototype.render = function () {\n    invariantIntlContext(this.state.intl);\n    return React.createElement(Provider, {\n      value: this.state.intl\n    }, this.props.children);\n  };\n\n  IntlProvider.displayName = 'IntlProvider';\n  IntlProvider.defaultProps = DEFAULT_INTL_CONFIG;\n  return IntlProvider;\n}(React.PureComponent);\n\nexport default IntlProvider;","map":{"version":3,"sources":["C:/Users/dangk/Documents/webFullstack/frontendReactJS/Frontend-React.JS-QuickStart/node_modules/react-intl/lib/src/components/provider.js"],"names":["__assign","__extends","__rest","__spreadArray","React","Provider","DEFAULT_INTL_CONFIG","invariantIntlContext","assignUniqueKeysToParts","shallowEqual","formatMessage","coreFormatMessage","createIntl","coreCreateIntl","createIntlCache","isFormatXMLElementFn","processIntlConfig","config","locale","timeZone","formats","textComponent","messages","defaultLocale","defaultFormats","onError","wrapRichTextChunksInFragment","defaultRichTextElements","assignUniqueKeysToFormatXMLElementFnArgument","values","Object","keys","reduce","acc","k","v","formatters","descriptor","rawValues","rest","_i","arguments","length","chunks","apply","Array","isArray","Children","toArray","_a","cache","rawDefaultRichTextElements","coreIntl","bind","IntlProvider","_super","_this","state","intl","props","prevConfig","getDerivedStateFromProps","prototype","render","createElement","value","children","displayName","defaultProps","PureComponent"],"mappings":"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","sourcesContent":["/*\r\n * Copyright 2015, Yahoo Inc.\r\n * Copyrights licensed under the New BSD License.\r\n * See the accompanying LICENSE file for terms.\r\n */\r\nimport { __assign, __extends, __rest, __spreadArray } from \"tslib\";\r\nimport * as React from 'react';\r\nimport { Provider } from './injectIntl';\r\nimport { DEFAULT_INTL_CONFIG, invariantIntlContext, assignUniqueKeysToParts, shallowEqual, } from '../utils';\r\nimport { formatMessage as coreFormatMessage, createIntl as coreCreateIntl, createIntlCache, } from '@formatjs/intl';\r\nimport { isFormatXMLElementFn, } from 'intl-messageformat';\r\nfunction processIntlConfig(config) {\r\n    return {\r\n        locale: config.locale,\r\n        timeZone: config.timeZone,\r\n        formats: config.formats,\r\n        textComponent: config.textComponent,\r\n        messages: config.messages,\r\n        defaultLocale: config.defaultLocale,\r\n        defaultFormats: config.defaultFormats,\r\n        onError: config.onError,\r\n        wrapRichTextChunksInFragment: config.wrapRichTextChunksInFragment,\r\n        defaultRichTextElements: config.defaultRichTextElements,\r\n    };\r\n}\r\nfunction assignUniqueKeysToFormatXMLElementFnArgument(values) {\r\n    if (!values) {\r\n        return values;\r\n    }\r\n    return Object.keys(values).reduce(function (acc, k) {\r\n        var v = values[k];\r\n        acc[k] = isFormatXMLElementFn(v)\r\n            ? assignUniqueKeysToParts(v)\r\n            : v;\r\n        return acc;\r\n    }, {});\r\n}\r\nvar formatMessage = function (config, formatters, descriptor, rawValues) {\r\n    var rest = [];\r\n    for (var _i = 4; _i < arguments.length; _i++) {\r\n        rest[_i - 4] = arguments[_i];\r\n    }\r\n    var values = assignUniqueKeysToFormatXMLElementFnArgument(rawValues);\r\n    var chunks = coreFormatMessage.apply(void 0, __spreadArray([config,\r\n        formatters,\r\n        descriptor, values], rest));\r\n    if (Array.isArray(chunks)) {\r\n        return React.Children.toArray(chunks);\r\n    }\r\n    return chunks;\r\n};\r\n/**\r\n * Create intl object\r\n * @param config intl config\r\n * @param cache cache for formatter instances to prevent memory leak\r\n */\r\nexport var createIntl = function (_a, cache) {\r\n    var rawDefaultRichTextElements = _a.defaultRichTextElements, config = __rest(_a, [\"defaultRichTextElements\"]);\r\n    var defaultRichTextElements = assignUniqueKeysToFormatXMLElementFnArgument(rawDefaultRichTextElements);\r\n    var coreIntl = coreCreateIntl(__assign(__assign(__assign({}, DEFAULT_INTL_CONFIG), config), { defaultRichTextElements: defaultRichTextElements }), cache);\r\n    return __assign(__assign({}, coreIntl), { formatMessage: formatMessage.bind(null, {\r\n            locale: coreIntl.locale,\r\n            timeZone: coreIntl.timeZone,\r\n            formats: coreIntl.formats,\r\n            defaultLocale: coreIntl.defaultLocale,\r\n            defaultFormats: coreIntl.defaultFormats,\r\n            messages: coreIntl.messages,\r\n            onError: coreIntl.onError,\r\n            defaultRichTextElements: defaultRichTextElements,\r\n        }, coreIntl.formatters) });\r\n};\r\nvar IntlProvider = /** @class */ (function (_super) {\r\n    __extends(IntlProvider, _super);\r\n    function IntlProvider() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.cache = createIntlCache();\r\n        _this.state = {\r\n            cache: _this.cache,\r\n            intl: createIntl(processIntlConfig(_this.props), _this.cache),\r\n            prevConfig: processIntlConfig(_this.props),\r\n        };\r\n        return _this;\r\n    }\r\n    IntlProvider.getDerivedStateFromProps = function (props, _a) {\r\n        var prevConfig = _a.prevConfig, cache = _a.cache;\r\n        var config = processIntlConfig(props);\r\n        if (!shallowEqual(prevConfig, config)) {\r\n            return {\r\n                intl: createIntl(config, cache),\r\n                prevConfig: config,\r\n            };\r\n        }\r\n        return null;\r\n    };\r\n    IntlProvider.prototype.render = function () {\r\n        invariantIntlContext(this.state.intl);\r\n        return React.createElement(Provider, { value: this.state.intl }, this.props.children);\r\n    };\r\n    IntlProvider.displayName = 'IntlProvider';\r\n    IntlProvider.defaultProps = DEFAULT_INTL_CONFIG;\r\n    return IntlProvider;\r\n}(React.PureComponent));\r\nexport default IntlProvider;\r\n"]},"metadata":{},"sourceType":"module"}