{"ast":null,"code":"import { SameValue } from '../262';\nimport { ToRawPrecision } from './ToRawPrecision';\nimport { repeat } from '../utils';\nimport { ToRawFixed } from './ToRawFixed';\n/**\r\n * https://tc39.es/ecma402/#sec-formatnumberstring\r\n */\n\nexport function FormatNumericToString(intlObject, x) {\n  var isNegative = x < 0 || SameValue(x, -0);\n\n  if (isNegative) {\n    x = -x;\n  }\n\n  var result;\n  var rourndingType = intlObject.roundingType;\n\n  switch (rourndingType) {\n    case 'significantDigits':\n      result = ToRawPrecision(x, intlObject.minimumSignificantDigits, intlObject.maximumSignificantDigits);\n      break;\n\n    case 'fractionDigits':\n      result = ToRawFixed(x, intlObject.minimumFractionDigits, intlObject.maximumFractionDigits);\n      break;\n\n    default:\n      result = ToRawPrecision(x, 1, 2);\n\n      if (result.integerDigitsCount > 1) {\n        result = ToRawFixed(x, 0, 0);\n      }\n\n      break;\n  }\n\n  x = result.roundedNumber;\n  var string = result.formattedString;\n  var int = result.integerDigitsCount;\n  var minInteger = intlObject.minimumIntegerDigits;\n\n  if (int < minInteger) {\n    var forwardZeros = repeat('0', minInteger - int);\n    string = forwardZeros + string;\n  }\n\n  if (isNegative) {\n    x = -x;\n  }\n\n  return {\n    roundedNumber: x,\n    formattedString: string\n  };\n}","map":{"version":3,"sources":["C:/Users/ADMIN/Documents/webFullstack/frontendReactJS/Frontend-React.JS-QuickStart/node_modules/react-intl/node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/FormatNumericToString.js"],"names":["SameValue","ToRawPrecision","repeat","ToRawFixed","FormatNumericToString","intlObject","x","isNegative","result","rourndingType","roundingType","minimumSignificantDigits","maximumSignificantDigits","minimumFractionDigits","maximumFractionDigits","integerDigitsCount","roundedNumber","string","formattedString","int","minInteger","minimumIntegerDigits","forwardZeros"],"mappings":"AAAA,SAASA,SAAT,QAA0B,QAA1B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA;AACA;AACA;;AACA,OAAO,SAASC,qBAAT,CAA+BC,UAA/B,EAA2CC,CAA3C,EAA8C;AACjD,MAAIC,UAAU,GAAGD,CAAC,GAAG,CAAJ,IAASN,SAAS,CAACM,CAAD,EAAI,CAAC,CAAL,CAAnC;;AACA,MAAIC,UAAJ,EAAgB;AACZD,IAAAA,CAAC,GAAG,CAACA,CAAL;AACH;;AACD,MAAIE,MAAJ;AACA,MAAIC,aAAa,GAAGJ,UAAU,CAACK,YAA/B;;AACA,UAAQD,aAAR;AACI,SAAK,mBAAL;AACID,MAAAA,MAAM,GAAGP,cAAc,CAACK,CAAD,EAAID,UAAU,CAACM,wBAAf,EAAyCN,UAAU,CAACO,wBAApD,CAAvB;AACA;;AACJ,SAAK,gBAAL;AACIJ,MAAAA,MAAM,GAAGL,UAAU,CAACG,CAAD,EAAID,UAAU,CAACQ,qBAAf,EAAsCR,UAAU,CAACS,qBAAjD,CAAnB;AACA;;AACJ;AACIN,MAAAA,MAAM,GAAGP,cAAc,CAACK,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAvB;;AACA,UAAIE,MAAM,CAACO,kBAAP,GAA4B,CAAhC,EAAmC;AAC/BP,QAAAA,MAAM,GAAGL,UAAU,CAACG,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAnB;AACH;;AACD;AAZR;;AAcAA,EAAAA,CAAC,GAAGE,MAAM,CAACQ,aAAX;AACA,MAAIC,MAAM,GAAGT,MAAM,CAACU,eAApB;AACA,MAAIC,GAAG,GAAGX,MAAM,CAACO,kBAAjB;AACA,MAAIK,UAAU,GAAGf,UAAU,CAACgB,oBAA5B;;AACA,MAAIF,GAAG,GAAGC,UAAV,EAAsB;AAClB,QAAIE,YAAY,GAAGpB,MAAM,CAAC,GAAD,EAAMkB,UAAU,GAAGD,GAAnB,CAAzB;AACAF,IAAAA,MAAM,GAAGK,YAAY,GAAGL,MAAxB;AACH;;AACD,MAAIV,UAAJ,EAAgB;AACZD,IAAAA,CAAC,GAAG,CAACA,CAAL;AACH;;AACD,SAAO;AAAEU,IAAAA,aAAa,EAAEV,CAAjB;AAAoBY,IAAAA,eAAe,EAAED;AAArC,GAAP;AACH","sourcesContent":["import { SameValue } from '../262';\r\nimport { ToRawPrecision } from './ToRawPrecision';\r\nimport { repeat } from '../utils';\r\nimport { ToRawFixed } from './ToRawFixed';\r\n/**\r\n * https://tc39.es/ecma402/#sec-formatnumberstring\r\n */\r\nexport function FormatNumericToString(intlObject, x) {\r\n    var isNegative = x < 0 || SameValue(x, -0);\r\n    if (isNegative) {\r\n        x = -x;\r\n    }\r\n    var result;\r\n    var rourndingType = intlObject.roundingType;\r\n    switch (rourndingType) {\r\n        case 'significantDigits':\r\n            result = ToRawPrecision(x, intlObject.minimumSignificantDigits, intlObject.maximumSignificantDigits);\r\n            break;\r\n        case 'fractionDigits':\r\n            result = ToRawFixed(x, intlObject.minimumFractionDigits, intlObject.maximumFractionDigits);\r\n            break;\r\n        default:\r\n            result = ToRawPrecision(x, 1, 2);\r\n            if (result.integerDigitsCount > 1) {\r\n                result = ToRawFixed(x, 0, 0);\r\n            }\r\n            break;\r\n    }\r\n    x = result.roundedNumber;\r\n    var string = result.formattedString;\r\n    var int = result.integerDigitsCount;\r\n    var minInteger = intlObject.minimumIntegerDigits;\r\n    if (int < minInteger) {\r\n        var forwardZeros = repeat('0', minInteger - int);\r\n        string = forwardZeros + string;\r\n    }\r\n    if (isNegative) {\r\n        x = -x;\r\n    }\r\n    return { roundedNumber: x, formattedString: string };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}