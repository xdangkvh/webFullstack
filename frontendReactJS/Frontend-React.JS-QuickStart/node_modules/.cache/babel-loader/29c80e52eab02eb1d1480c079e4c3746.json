{"ast":null,"code":"import { getNamedFormat, filterProps } from './utils';\nimport { IntlError, IntlErrorCode } from './error';\nvar NUMBER_FORMAT_OPTIONS = ['localeMatcher', 'style', 'currency', 'currencyDisplay', 'unit', 'unitDisplay', 'useGrouping', 'minimumIntegerDigits', 'minimumFractionDigits', 'maximumFractionDigits', 'minimumSignificantDigits', 'maximumSignificantDigits', // ES2020 NumberFormat\n'compactDisplay', 'currencyDisplay', 'currencySign', 'notation', 'signDisplay', 'unit', 'unitDisplay', 'numberingSystem'];\nexport function getFormatter(_a, getNumberFormat, options) {\n  var locale = _a.locale,\n      formats = _a.formats,\n      onError = _a.onError;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var format = options.format;\n  var defaults = format && getNamedFormat(formats, 'number', format, onError) || {};\n  var filteredOptions = filterProps(options, NUMBER_FORMAT_OPTIONS, defaults);\n  return getNumberFormat(locale, filteredOptions);\n}\nexport function formatNumber(config, getNumberFormat, value, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  try {\n    return getFormatter(config, getNumberFormat, options).format(value);\n  } catch (e) {\n    config.onError(new IntlError(IntlErrorCode.FORMAT_ERROR, 'Error formatting number.', e));\n  }\n\n  return String(value);\n}\nexport function formatNumberToParts(config, getNumberFormat, value, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  try {\n    return getFormatter(config, getNumberFormat, options).formatToParts(value);\n  } catch (e) {\n    config.onError(new IntlError(IntlErrorCode.FORMAT_ERROR, 'Error formatting number.', e));\n  }\n\n  return [];\n}","map":{"version":3,"sources":["C:/Users/ADMIN/Documents/webFullstack/frontendReactJS/Frontend-React.JS-QuickStart/node_modules/@formatjs/intl/lib/src/number.js"],"names":["getNamedFormat","filterProps","IntlError","IntlErrorCode","NUMBER_FORMAT_OPTIONS","getFormatter","_a","getNumberFormat","options","locale","formats","onError","format","defaults","filteredOptions","formatNumber","config","value","e","FORMAT_ERROR","String","formatNumberToParts","formatToParts"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,WAAzB,QAA4C,SAA5C;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,SAAzC;AACA,IAAIC,qBAAqB,GAAG,CACxB,eADwB,EAExB,OAFwB,EAGxB,UAHwB,EAIxB,iBAJwB,EAKxB,MALwB,EAMxB,aANwB,EAOxB,aAPwB,EAQxB,sBARwB,EASxB,uBATwB,EAUxB,uBAVwB,EAWxB,0BAXwB,EAYxB,0BAZwB,EAaxB;AACA,gBAdwB,EAexB,iBAfwB,EAgBxB,cAhBwB,EAiBxB,UAjBwB,EAkBxB,aAlBwB,EAmBxB,MAnBwB,EAoBxB,aApBwB,EAqBxB,iBArBwB,CAA5B;AAuBA,OAAO,SAASC,YAAT,CAAsBC,EAAtB,EAA0BC,eAA1B,EAA2CC,OAA3C,EAAoD;AACvD,MAAIC,MAAM,GAAGH,EAAE,CAACG,MAAhB;AAAA,MAAwBC,OAAO,GAAGJ,EAAE,CAACI,OAArC;AAAA,MAA8CC,OAAO,GAAGL,EAAE,CAACK,OAA3D;;AACA,MAAIH,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAG,EAAV;AAAe;;AACzC,MAAII,MAAM,GAAGJ,OAAO,CAACI,MAArB;AACA,MAAIC,QAAQ,GAAKD,MAAM,IACnBZ,cAAc,CAACU,OAAD,EAAU,QAAV,EAAoBE,MAApB,EAA4BD,OAA5B,CADF,IAEZ,EAFJ;AAGA,MAAIG,eAAe,GAAGb,WAAW,CAACO,OAAD,EAAUJ,qBAAV,EAAiCS,QAAjC,CAAjC;AACA,SAAON,eAAe,CAACE,MAAD,EAASK,eAAT,CAAtB;AACH;AACD,OAAO,SAASC,YAAT,CAAsBC,MAAtB,EAA8BT,eAA9B,EAA+CU,KAA/C,EAAsDT,OAAtD,EAA+D;AAClE,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAG,EAAV;AAAe;;AACzC,MAAI;AACA,WAAOH,YAAY,CAACW,MAAD,EAAST,eAAT,EAA0BC,OAA1B,CAAZ,CAA+CI,MAA/C,CAAsDK,KAAtD,CAAP;AACH,GAFD,CAGA,OAAOC,CAAP,EAAU;AACNF,IAAAA,MAAM,CAACL,OAAP,CAAe,IAAIT,SAAJ,CAAcC,aAAa,CAACgB,YAA5B,EAA0C,0BAA1C,EAAsED,CAAtE,CAAf;AACH;;AACD,SAAOE,MAAM,CAACH,KAAD,CAAb;AACH;AACD,OAAO,SAASI,mBAAT,CAA6BL,MAA7B,EAAqCT,eAArC,EAAsDU,KAAtD,EAA6DT,OAA7D,EAAsE;AACzE,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAG,EAAV;AAAe;;AACzC,MAAI;AACA,WAAOH,YAAY,CAACW,MAAD,EAAST,eAAT,EAA0BC,OAA1B,CAAZ,CAA+Cc,aAA/C,CAA6DL,KAA7D,CAAP;AACH,GAFD,CAGA,OAAOC,CAAP,EAAU;AACNF,IAAAA,MAAM,CAACL,OAAP,CAAe,IAAIT,SAAJ,CAAcC,aAAa,CAACgB,YAA5B,EAA0C,0BAA1C,EAAsED,CAAtE,CAAf;AACH;;AACD,SAAO,EAAP;AACH","sourcesContent":["import { getNamedFormat, filterProps } from './utils';\r\nimport { IntlError, IntlErrorCode } from './error';\r\nvar NUMBER_FORMAT_OPTIONS = [\r\n    'localeMatcher',\r\n    'style',\r\n    'currency',\r\n    'currencyDisplay',\r\n    'unit',\r\n    'unitDisplay',\r\n    'useGrouping',\r\n    'minimumIntegerDigits',\r\n    'minimumFractionDigits',\r\n    'maximumFractionDigits',\r\n    'minimumSignificantDigits',\r\n    'maximumSignificantDigits',\r\n    // ES2020 NumberFormat\r\n    'compactDisplay',\r\n    'currencyDisplay',\r\n    'currencySign',\r\n    'notation',\r\n    'signDisplay',\r\n    'unit',\r\n    'unitDisplay',\r\n    'numberingSystem',\r\n];\r\nexport function getFormatter(_a, getNumberFormat, options) {\r\n    var locale = _a.locale, formats = _a.formats, onError = _a.onError;\r\n    if (options === void 0) { options = {}; }\r\n    var format = options.format;\r\n    var defaults = ((format &&\r\n        getNamedFormat(formats, 'number', format, onError)) ||\r\n        {});\r\n    var filteredOptions = filterProps(options, NUMBER_FORMAT_OPTIONS, defaults);\r\n    return getNumberFormat(locale, filteredOptions);\r\n}\r\nexport function formatNumber(config, getNumberFormat, value, options) {\r\n    if (options === void 0) { options = {}; }\r\n    try {\r\n        return getFormatter(config, getNumberFormat, options).format(value);\r\n    }\r\n    catch (e) {\r\n        config.onError(new IntlError(IntlErrorCode.FORMAT_ERROR, 'Error formatting number.', e));\r\n    }\r\n    return String(value);\r\n}\r\nexport function formatNumberToParts(config, getNumberFormat, value, options) {\r\n    if (options === void 0) { options = {}; }\r\n    try {\r\n        return getFormatter(config, getNumberFormat, options).formatToParts(value);\r\n    }\r\n    catch (e) {\r\n        config.onError(new IntlError(IntlErrorCode.FORMAT_ERROR, 'Error formatting number.', e));\r\n    }\r\n    return [];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}