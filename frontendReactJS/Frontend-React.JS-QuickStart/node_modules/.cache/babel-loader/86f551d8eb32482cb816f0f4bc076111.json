{"ast":null,"code":"import { repeat } from '../utils';\n/**\r\n * TODO: dedup with intl-pluralrules and support BigInt\r\n * https://tc39.es/ecma402/#sec-torawfixed\r\n * @param x a finite non-negative Number or BigInt\r\n * @param minFraction and integer between 0 and 20\r\n * @param maxFraction and integer between 0 and 20\r\n */\n\nexport function ToRawFixed(x, minFraction, maxFraction) {\n  var f = maxFraction;\n  var n = Math.round(x * Math.pow(10, f));\n  var xFinal = n / Math.pow(10, f); // n is a positive integer, but it is possible to be greater than 1e21.\n  // In such case we will go the slow path.\n  // See also: https://tc39.es/ecma262/#sec-numeric-types-number-tostring\n\n  var m;\n\n  if (n < 1e21) {\n    m = n.toString();\n  } else {\n    m = n.toString();\n\n    var _a = m.split('e'),\n        mantissa = _a[0],\n        exponent = _a[1];\n\n    m = mantissa.replace('.', '');\n    m = m + repeat('0', Math.max(+exponent - m.length + 1, 0));\n  }\n\n  var int;\n\n  if (f !== 0) {\n    var k = m.length;\n\n    if (k <= f) {\n      var z = repeat('0', f + 1 - k);\n      m = z + m;\n      k = f + 1;\n    }\n\n    var a = m.slice(0, k - f);\n    var b = m.slice(k - f);\n    m = a + \".\" + b;\n    int = a.length;\n  } else {\n    int = m.length;\n  }\n\n  var cut = maxFraction - minFraction;\n\n  while (cut > 0 && m[m.length - 1] === '0') {\n    m = m.slice(0, -1);\n    cut--;\n  }\n\n  if (m[m.length - 1] === '.') {\n    m = m.slice(0, -1);\n  }\n\n  return {\n    formattedString: m,\n    roundedNumber: xFinal,\n    integerDigitsCount: int\n  };\n}","map":{"version":3,"sources":["C:/Users/dangk/Documents/webFullstack/frontendReactJS/Frontend-React.JS-QuickStart/node_modules/@formatjs/intl/node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/ToRawFixed.js"],"names":["repeat","ToRawFixed","x","minFraction","maxFraction","f","n","Math","round","pow","xFinal","m","toString","_a","split","mantissa","exponent","replace","max","length","int","k","z","a","slice","b","cut","formattedString","roundedNumber","integerDigitsCount"],"mappings":"AAAA,SAASA,MAAT,QAAuB,UAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,CAAoBC,CAApB,EAAuBC,WAAvB,EAAoCC,WAApC,EAAiD;AACpD,MAAIC,CAAC,GAAGD,WAAR;AACA,MAAIE,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWN,CAAC,GAAGK,IAAI,CAACE,GAAL,CAAS,EAAT,EAAaJ,CAAb,CAAf,CAAR;AACA,MAAIK,MAAM,GAAGJ,CAAC,GAAGC,IAAI,CAACE,GAAL,CAAS,EAAT,EAAaJ,CAAb,CAAjB,CAHoD,CAIpD;AACA;AACA;;AACA,MAAIM,CAAJ;;AACA,MAAIL,CAAC,GAAG,IAAR,EAAc;AACVK,IAAAA,CAAC,GAAGL,CAAC,CAACM,QAAF,EAAJ;AACH,GAFD,MAGK;AACDD,IAAAA,CAAC,GAAGL,CAAC,CAACM,QAAF,EAAJ;;AACA,QAAIC,EAAE,GAAGF,CAAC,CAACG,KAAF,CAAQ,GAAR,CAAT;AAAA,QAAuBC,QAAQ,GAAGF,EAAE,CAAC,CAAD,CAApC;AAAA,QAAyCG,QAAQ,GAAGH,EAAE,CAAC,CAAD,CAAtD;;AACAF,IAAAA,CAAC,GAAGI,QAAQ,CAACE,OAAT,CAAiB,GAAjB,EAAsB,EAAtB,CAAJ;AACAN,IAAAA,CAAC,GAAGA,CAAC,GAAGX,MAAM,CAAC,GAAD,EAAMO,IAAI,CAACW,GAAL,CAAS,CAACF,QAAD,GAAYL,CAAC,CAACQ,MAAd,GAAuB,CAAhC,EAAmC,CAAnC,CAAN,CAAd;AACH;;AACD,MAAIC,GAAJ;;AACA,MAAIf,CAAC,KAAK,CAAV,EAAa;AACT,QAAIgB,CAAC,GAAGV,CAAC,CAACQ,MAAV;;AACA,QAAIE,CAAC,IAAIhB,CAAT,EAAY;AACR,UAAIiB,CAAC,GAAGtB,MAAM,CAAC,GAAD,EAAMK,CAAC,GAAG,CAAJ,GAAQgB,CAAd,CAAd;AACAV,MAAAA,CAAC,GAAGW,CAAC,GAAGX,CAAR;AACAU,MAAAA,CAAC,GAAGhB,CAAC,GAAG,CAAR;AACH;;AACD,QAAIkB,CAAC,GAAGZ,CAAC,CAACa,KAAF,CAAQ,CAAR,EAAWH,CAAC,GAAGhB,CAAf,CAAR;AACA,QAAIoB,CAAC,GAAGd,CAAC,CAACa,KAAF,CAAQH,CAAC,GAAGhB,CAAZ,CAAR;AACAM,IAAAA,CAAC,GAAGY,CAAC,GAAG,GAAJ,GAAUE,CAAd;AACAL,IAAAA,GAAG,GAAGG,CAAC,CAACJ,MAAR;AACH,GAXD,MAYK;AACDC,IAAAA,GAAG,GAAGT,CAAC,CAACQ,MAAR;AACH;;AACD,MAAIO,GAAG,GAAGtB,WAAW,GAAGD,WAAxB;;AACA,SAAOuB,GAAG,GAAG,CAAN,IAAWf,CAAC,CAACA,CAAC,CAACQ,MAAF,GAAW,CAAZ,CAAD,KAAoB,GAAtC,EAA2C;AACvCR,IAAAA,CAAC,GAAGA,CAAC,CAACa,KAAF,CAAQ,CAAR,EAAW,CAAC,CAAZ,CAAJ;AACAE,IAAAA,GAAG;AACN;;AACD,MAAIf,CAAC,CAACA,CAAC,CAACQ,MAAF,GAAW,CAAZ,CAAD,KAAoB,GAAxB,EAA6B;AACzBR,IAAAA,CAAC,GAAGA,CAAC,CAACa,KAAF,CAAQ,CAAR,EAAW,CAAC,CAAZ,CAAJ;AACH;;AACD,SAAO;AAAEG,IAAAA,eAAe,EAAEhB,CAAnB;AAAsBiB,IAAAA,aAAa,EAAElB,MAArC;AAA6CmB,IAAAA,kBAAkB,EAAET;AAAjE,GAAP;AACH","sourcesContent":["import { repeat } from '../utils';\r\n/**\r\n * TODO: dedup with intl-pluralrules and support BigInt\r\n * https://tc39.es/ecma402/#sec-torawfixed\r\n * @param x a finite non-negative Number or BigInt\r\n * @param minFraction and integer between 0 and 20\r\n * @param maxFraction and integer between 0 and 20\r\n */\r\nexport function ToRawFixed(x, minFraction, maxFraction) {\r\n    var f = maxFraction;\r\n    var n = Math.round(x * Math.pow(10, f));\r\n    var xFinal = n / Math.pow(10, f);\r\n    // n is a positive integer, but it is possible to be greater than 1e21.\r\n    // In such case we will go the slow path.\r\n    // See also: https://tc39.es/ecma262/#sec-numeric-types-number-tostring\r\n    var m;\r\n    if (n < 1e21) {\r\n        m = n.toString();\r\n    }\r\n    else {\r\n        m = n.toString();\r\n        var _a = m.split('e'), mantissa = _a[0], exponent = _a[1];\r\n        m = mantissa.replace('.', '');\r\n        m = m + repeat('0', Math.max(+exponent - m.length + 1, 0));\r\n    }\r\n    var int;\r\n    if (f !== 0) {\r\n        var k = m.length;\r\n        if (k <= f) {\r\n            var z = repeat('0', f + 1 - k);\r\n            m = z + m;\r\n            k = f + 1;\r\n        }\r\n        var a = m.slice(0, k - f);\r\n        var b = m.slice(k - f);\r\n        m = a + \".\" + b;\r\n        int = a.length;\r\n    }\r\n    else {\r\n        int = m.length;\r\n    }\r\n    var cut = maxFraction - minFraction;\r\n    while (cut > 0 && m[m.length - 1] === '0') {\r\n        m = m.slice(0, -1);\r\n        cut--;\r\n    }\r\n    if (m[m.length - 1] === '.') {\r\n        m = m.slice(0, -1);\r\n    }\r\n    return { formattedString: m, roundedNumber: xFinal, integerDigitsCount: int };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}