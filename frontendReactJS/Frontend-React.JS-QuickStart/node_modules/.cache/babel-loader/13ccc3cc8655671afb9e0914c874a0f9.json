{"ast":null,"code":"import { PartitionPattern } from '../PartitionPattern';\nimport { invariant } from '../utils';\nexport function MakePartsList(pattern, unit, parts) {\n  var patternParts = PartitionPattern(pattern);\n  var result = [];\n\n  for (var _i = 0, patternParts_1 = patternParts; _i < patternParts_1.length; _i++) {\n    var patternPart = patternParts_1[_i];\n\n    if (patternPart.type === 'literal') {\n      result.push({\n        type: 'literal',\n        value: patternPart.value\n      });\n    } else {\n      invariant(patternPart.type === '0', \"Malformed pattern \" + pattern);\n\n      for (var _a = 0, parts_1 = parts; _a < parts_1.length; _a++) {\n        var part = parts_1[_a];\n        result.push({\n          type: part.type,\n          value: part.value,\n          unit: unit\n        });\n      }\n    }\n  }\n\n  return result;\n}","map":{"version":3,"sources":["C:/Users/ADMIN/Documents/webFullstack/frontendReactJS/Frontend-React.JS-QuickStart/node_modules/@formatjs/ecma402-abstract/lib/RelativeTimeFormat/MakePartsList.js"],"names":["PartitionPattern","invariant","MakePartsList","pattern","unit","parts","patternParts","result","_i","patternParts_1","length","patternPart","type","push","value","_a","parts_1","part"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,qBAAjC;AACA,SAASC,SAAT,QAA0B,UAA1B;AACA,OAAO,SAASC,aAAT,CAAuBC,OAAvB,EAAgCC,IAAhC,EAAsCC,KAAtC,EAA6C;AAChD,MAAIC,YAAY,GAAGN,gBAAgB,CAACG,OAAD,CAAnC;AACA,MAAII,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,EAAE,GAAG,CAAT,EAAYC,cAAc,GAAGH,YAAlC,EAAgDE,EAAE,GAAGC,cAAc,CAACC,MAApE,EAA4EF,EAAE,EAA9E,EAAkF;AAC9E,QAAIG,WAAW,GAAGF,cAAc,CAACD,EAAD,CAAhC;;AACA,QAAIG,WAAW,CAACC,IAAZ,KAAqB,SAAzB,EAAoC;AAChCL,MAAAA,MAAM,CAACM,IAAP,CAAY;AACRD,QAAAA,IAAI,EAAE,SADE;AAERE,QAAAA,KAAK,EAAEH,WAAW,CAACG;AAFX,OAAZ;AAIH,KALD,MAMK;AACDb,MAAAA,SAAS,CAACU,WAAW,CAACC,IAAZ,KAAqB,GAAtB,EAA2B,uBAAuBT,OAAlD,CAAT;;AACA,WAAK,IAAIY,EAAE,GAAG,CAAT,EAAYC,OAAO,GAAGX,KAA3B,EAAkCU,EAAE,GAAGC,OAAO,CAACN,MAA/C,EAAuDK,EAAE,EAAzD,EAA6D;AACzD,YAAIE,IAAI,GAAGD,OAAO,CAACD,EAAD,CAAlB;AACAR,QAAAA,MAAM,CAACM,IAAP,CAAY;AACRD,UAAAA,IAAI,EAAEK,IAAI,CAACL,IADH;AAERE,UAAAA,KAAK,EAAEG,IAAI,CAACH,KAFJ;AAGRV,UAAAA,IAAI,EAAEA;AAHE,SAAZ;AAKH;AACJ;AACJ;;AACD,SAAOG,MAAP;AACH","sourcesContent":["import { PartitionPattern } from '../PartitionPattern';\r\nimport { invariant } from '../utils';\r\nexport function MakePartsList(pattern, unit, parts) {\r\n    var patternParts = PartitionPattern(pattern);\r\n    var result = [];\r\n    for (var _i = 0, patternParts_1 = patternParts; _i < patternParts_1.length; _i++) {\r\n        var patternPart = patternParts_1[_i];\r\n        if (patternPart.type === 'literal') {\r\n            result.push({\r\n                type: 'literal',\r\n                value: patternPart.value,\r\n            });\r\n        }\r\n        else {\r\n            invariant(patternPart.type === '0', \"Malformed pattern \" + pattern);\r\n            for (var _a = 0, parts_1 = parts; _a < parts_1.length; _a++) {\r\n                var part = parts_1[_a];\r\n                result.push({\r\n                    type: part.type,\r\n                    value: part.value,\r\n                    unit: unit,\r\n                });\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}