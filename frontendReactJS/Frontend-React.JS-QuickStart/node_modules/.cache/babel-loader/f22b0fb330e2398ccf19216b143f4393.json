{"ast":null,"code":"/**\n * this is a set which automatically forgets\n * a given entry when a new entry is set and the ttl\n * of the old one is over\n * @constructor\n */\nvar ObliviousSet = function ObliviousSet(ttl) {\n  var set = new Set();\n  var timeMap = new Map();\n  this.has = set.has.bind(set);\n\n  this.add = function (value) {\n    timeMap.set(value, now());\n    set.add(value);\n\n    _removeTooOldValues();\n  };\n\n  this.clear = function () {\n    set.clear();\n    timeMap.clear();\n  };\n\n  function _removeTooOldValues() {\n    var olderThen = now() - ttl;\n    var iterator = set[Symbol.iterator]();\n\n    while (true) {\n      var value = iterator.next().value;\n      if (!value) return; // no more elements\n\n      var time = timeMap.get(value);\n\n      if (time < olderThen) {\n        timeMap[\"delete\"](value);\n        set[\"delete\"](value);\n      } else {\n        // we reached a value that is not old enough\n        return;\n      }\n    }\n  }\n};\n\nfunction now() {\n  return new Date().getTime();\n}\n\nexport default ObliviousSet;","map":{"version":3,"sources":["C:/Users/ADMIN/Documents/webFullstack/frontendReactJS/Frontend-React.JS-QuickStart/node_modules/broadcast-channel/dist/es/oblivious-set.js"],"names":["ObliviousSet","ttl","set","Set","timeMap","Map","has","bind","add","value","now","_removeTooOldValues","clear","olderThen","iterator","Symbol","next","time","get","Date","getTime"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,YAAY,GAAG,SAASA,YAAT,CAAsBC,GAAtB,EAA2B;AAC5C,MAAIC,GAAG,GAAG,IAAIC,GAAJ,EAAV;AACA,MAAIC,OAAO,GAAG,IAAIC,GAAJ,EAAd;AACA,OAAKC,GAAL,GAAWJ,GAAG,CAACI,GAAJ,CAAQC,IAAR,CAAaL,GAAb,CAAX;;AAEA,OAAKM,GAAL,GAAW,UAAUC,KAAV,EAAiB;AAC1BL,IAAAA,OAAO,CAACF,GAAR,CAAYO,KAAZ,EAAmBC,GAAG,EAAtB;AACAR,IAAAA,GAAG,CAACM,GAAJ,CAAQC,KAAR;;AAEAE,IAAAA,mBAAmB;AACpB,GALD;;AAOA,OAAKC,KAAL,GAAa,YAAY;AACvBV,IAAAA,GAAG,CAACU,KAAJ;AACAR,IAAAA,OAAO,CAACQ,KAAR;AACD,GAHD;;AAKA,WAASD,mBAAT,GAA+B;AAC7B,QAAIE,SAAS,GAAGH,GAAG,KAAKT,GAAxB;AACA,QAAIa,QAAQ,GAAGZ,GAAG,CAACa,MAAM,CAACD,QAAR,CAAH,EAAf;;AAEA,WAAO,IAAP,EAAa;AACX,UAAIL,KAAK,GAAGK,QAAQ,CAACE,IAAT,GAAgBP,KAA5B;AACA,UAAI,CAACA,KAAL,EAAY,OAFD,CAES;;AAEpB,UAAIQ,IAAI,GAAGb,OAAO,CAACc,GAAR,CAAYT,KAAZ,CAAX;;AAEA,UAAIQ,IAAI,GAAGJ,SAAX,EAAsB;AACpBT,QAAAA,OAAO,CAAC,QAAD,CAAP,CAAkBK,KAAlB;AACAP,QAAAA,GAAG,CAAC,QAAD,CAAH,CAAcO,KAAd;AACD,OAHD,MAGO;AACL;AACA;AACD;AACF;AACF;AACF,CApCD;;AAsCA,SAASC,GAAT,GAAe;AACb,SAAO,IAAIS,IAAJ,GAAWC,OAAX,EAAP;AACD;;AAED,eAAepB,YAAf","sourcesContent":["/**\n * this is a set which automatically forgets\n * a given entry when a new entry is set and the ttl\n * of the old one is over\n * @constructor\n */\nvar ObliviousSet = function ObliviousSet(ttl) {\n  var set = new Set();\n  var timeMap = new Map();\n  this.has = set.has.bind(set);\n\n  this.add = function (value) {\n    timeMap.set(value, now());\n    set.add(value);\n\n    _removeTooOldValues();\n  };\n\n  this.clear = function () {\n    set.clear();\n    timeMap.clear();\n  };\n\n  function _removeTooOldValues() {\n    var olderThen = now() - ttl;\n    var iterator = set[Symbol.iterator]();\n\n    while (true) {\n      var value = iterator.next().value;\n      if (!value) return; // no more elements\n\n      var time = timeMap.get(value);\n\n      if (time < olderThen) {\n        timeMap[\"delete\"](value);\n        set[\"delete\"](value);\n      } else {\n        // we reached a value that is not old enough\n        return;\n      }\n    }\n  }\n};\n\nfunction now() {\n  return new Date().getTime();\n}\n\nexport default ObliviousSet;"]},"metadata":{},"sourceType":"module"}