"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _hoistNonReactStatics = _interopRequireDefault(require("hoist-non-react-statics"));

var _helpers = require("./helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defaults = {
  authenticatedSelector: function authenticatedSelector(p) {
    return Boolean(p.isAuthenticated);
  },
  authenticatingSelector: function authenticatingSelector(p) {
    return Boolean(p.isAuthenticating);
  },
  AuthenticatingComponent: function AuthenticatingComponent() {
    return null;
  },
  // dont render anything while authenticating
  FailureComponent: function FailureComponent() {
    return null;
  },
  // dont render anything on failure of the predicate
  wrapperDisplayName: 'AuthWrapper'
  /**
   * A simple wrapper to any component that will only display the component if the user is in an authenticated state.
   * It will look for props injected into the component to determine whether to display either:
   *   - A Failure Component (when the `authenticatedSelector` returns `false`)
   *   - An Authenticating/Pending Component (when `authenticatingSelector` returns `true` and `authenticatedSelector` also returns `false`)
   *   - Your actual Component (when the `authenticatedSelector` returns `true`)
   * If the optional components are not provided `null` will be rendered/returned when in those states.
   *
   * @func
   * @sig {k: v} -> (Component -> ({k: v} -> Component))
   * @param {Function|String} args.authenticatedSelector A prop name OR a selector function
   * that will find the prop injected into the component that identifies whether the user is authenticated or not
   * (defaults to look for a prop named `isAuthenticated`)
   * @param {Function|String} args.authenticatingSelector A prop name OR a selector function
   * that will find the prop injected into the component that identifies whether the user authentication
   * is in-progress or not (defaults to look for a prop named `isAuthenticating`)
   * @param {Function} args.AuthenticatingComponent An optional component that would be
   * displaying while authentication is in-progress (defaults to an empty Component that returns `null`)
   * @param {Function} args.FailureComponent An optional component that would be diplayed
   * when authentication fails (defaults to a Component Component that returns `null`)
   * @param {String} args.wrapperDisplayName An optional display name to give to
   * the wrapper component (defaults to just 'AuthWrapper')
   * @returns {Function} A function that is ready to receive a Component to decorate
   */

};

function withAuth(args) {
  if (args === void 0) {
    args = {};
  }

  var _defaults$args = _objectSpread({}, defaults, args),
      FailureComponent = _defaults$args.FailureComponent,
      wrapperDisplayName = _defaults$args.wrapperDisplayName,
      authenticatedSelector = _defaults$args.authenticatedSelector,
      authenticatingSelector = _defaults$args.authenticatingSelector,
      AuthenticatingComponent = _defaults$args.AuthenticatingComponent;

  var getAuthenticated = (0, _helpers.validateStringOrFunction)(authenticatedSelector, 'authenticatedSelector');
  var getAuthenticating = (0, _helpers.validateStringOrFunction)(authenticatingSelector, 'authenticatingSelector'); // Wraps the component that needs the auth enforcement

  function wrapComponent(DecoratedComponent) {
    var displayName = DecoratedComponent.displayName || DecoratedComponent.name || 'Component';

    var AuthWrapper = function AuthWrapper(props) {
      var isAuthenticated = getAuthenticated(props);
      var isAuthenticating = getAuthenticating(props);

      if (isAuthenticated) {
        return _react.default.createElement(DecoratedComponent, props);
      } else if (isAuthenticating) {
        return _react.default.createElement(AuthenticatingComponent, props);
      } else {
        return _react.default.createElement(FailureComponent, props);
      }
    };

    AuthWrapper.displayName = wrapperDisplayName + "(" + displayName + ")";
    return (0, _hoistNonReactStatics.default)(AuthWrapper, DecoratedComponent);
  }

  return wrapComponent;
}

var _default = withAuth;
exports.default = _default;
module.exports = exports.default;