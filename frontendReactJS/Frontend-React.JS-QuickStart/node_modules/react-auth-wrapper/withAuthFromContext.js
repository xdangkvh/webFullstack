"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _withAuth = _interopRequireDefault(require("./withAuth"));

var _helpers = require("./helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var defaults = {
  authenticatingSelector: function authenticatingSelector(contextProps) {
    return contextProps.isAuthenticating;
  },
  authenticatedSelector: function authenticatedSelector(contextProps) {
    return contextProps.isAuthenticated;
  }
  /**
   * A simple wrapper to any component that will only display the component if the user is in an authenticated state.
   * Unlike the `withAuth` higher-order component, this one is expecting a [Context Consumer](https://reactjs.org/docs/context.html#contextconsumer)
   * to be provided, and it will use the props provided to the consumer to apply the authenticated/authenticating selectors.
   * It will look for props injected into the component to determine whether to display either:
   *   - A Failure Component (when the `authenticatedSelector` returns `false`)
   *   - An Authenticating/Pending Component (when `authenticatingSelector` returns `true` and `authenticatedSelector` also returns `false`)
   *   - Your actual Component (when the `authenticatedSelector` returns `true`)
   * If the optional components are not provided `null` will be rendered/returned when in those states.
   *
   * @func
   * @sig {k: v} -> (Component -> ({k: v} -> Component))
   * @param {Function|String} args.authenticatedSelector A prop name OR a selector function
   * that will find the prop injected into the component that identifies whether the user is authenticated or not
   * (defaults to look for a prop named `isAuthenticated`)
   * @param {Function|String} args.authenticatingSelector A prop name OR a selector function
   * that will find the prop injected into the component that identifies whether the user authentication
   * is in-progress or not (defaults to look for a prop named `isAuthenticating`)
   * @param {Function} args.ContextConsumer An instance of a `.Consumer` from the context object that
   * [React.createContext()](https://reactjs.org/docs/context.html#reactcreatecontext) returns
   * @param {Function} args.AuthenticatingComponent An optional component that would be
   * displaying while authentication is in-progress (defaults to an empty Component that returns `null`)
   * @param {Function} args.FailureComponent An optional component that would be diplayed
   * when authentication fails (defaults to a Component Component that returns `null`)
   * @param {String} args.wrapperDisplayName An optional display name to give to
   * the wrapper component (defaults to just 'AuthWrapper')
   * @returns {Function} A function that is ready to receive a Component to decorate
   */

};

function withAuthFromContext(args) {
  if (args === void 0) {
    args = {};
  }

  var _defaults$args = _objectSpread({}, defaults, args),
      ContextConsumer = _defaults$args.ContextConsumer,
      authenticatedSelector = _defaults$args.authenticatedSelector,
      authenticatingSelector = _defaults$args.authenticatingSelector,
      restOfArgs = _objectWithoutPropertiesLoose(_defaults$args, ["ContextConsumer", "authenticatedSelector", "authenticatingSelector"]);

  var getAuthenticated = (0, _helpers.validateStringOrFunction)(authenticatedSelector, 'authenticatedSelector');
  var getAuthenticating = (0, _helpers.validateStringOrFunction)(authenticatingSelector, 'authenticatingSelector');
  return function (DecoratedComponent) {
    var AuthWrappedComponent = (0, _withAuth.default)(restOfArgs)(DecoratedComponent);
    return function (props) {
      return _react.default.createElement(ContextConsumer, props, function (contextProps) {
        return _react.default.createElement(AuthWrappedComponent, _extends({}, props, {
          isAuthenticated: getAuthenticated(contextProps),
          isAuthenticating: getAuthenticating(contextProps)
        }));
      });
    };
  };
}

var _default = withAuthFromContext;
exports.default = _default;
module.exports = exports.default;