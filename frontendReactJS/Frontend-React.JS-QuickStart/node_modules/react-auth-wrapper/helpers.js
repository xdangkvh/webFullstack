"use strict";

exports.__esModule = true;
exports.encode = encode;
exports.parse = parse;
exports.parseQs = parseQs;
exports.parseUrl = parseUrl;
exports.stringify = stringify;
exports.getFullRedirectPath = getFullRedirectPath;
exports.validateBoolOrFunction = validateBoolOrFunction;
exports.validateStringOrFunction = validateStringOrFunction;

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function encode(key, value) {
  var keyOnly = value == null || typeof value !== 'string' && typeof value !== 'number' && !Array.isArray(value);
  return keyOnly ? encodeURIComponent(key) : [encodeURIComponent(key), '=', encodeURIComponent(value)].join('');
}

function parse(strRaw, key) {
  if (typeof key !== 'string' || !key || typeof strRaw !== 'string' || !strRaw) {
    return '';
  }

  var decodedVal = strRaw.split('&').filter(function (kv) {
    return kv.split('=')[0] === key && kv.split('=')[1];
  }).map(function (kv) {
    return decodeURIComponent(kv.split('=')[1]);
  })[0];

  try {
    if (/({|}|\[|\])/.test(decodedVal)) {
      return JSON.parse(decodedVal);
    }
  } catch (error) {// Failed to parse json
  }

  return decodedVal;
}

function parseQs(qsRaw) {
  if (typeof qsRaw !== 'string' || !qsRaw) {
    return {};
  }

  return qsRaw.split('&').filter(function (kv) {
    return kv.split('=')[1];
  }).reduce(function (acc, kv) {
    var _objectSpread2;

    return _objectSpread({}, acc, (_objectSpread2 = {}, _objectSpread2[kv.split('=')[0]] = decodeURIComponent(kv.split('=')[1]), _objectSpread2));
  }, {});
}

function stringify(obj) {
  if (!obj) return '';
  return Object.keys(obj).map(function (key) {
    var value = obj[key];
    if (value === undefined) return '';
    if (value === null || typeof value === 'string' && !value) return encodeURIComponent(key);

    if (Array.isArray(value)) {
      var result = [];
      value.filter(function (v) {
        return v !== 'undefined';
      }).forEach(function (val) {
        result.push(encode(key, val, result.length));
      });
      return result.join('&');
    }

    return encode(key, value);
  }).filter(Boolean).join('&');
}

function parseUrl(url) {
  var hash = '';
  var search = '';
  var pathname = '';
  var href = (url || '').trim();
  var protocolIndex = href.indexOf('://');
  var withoutProtocol = protocolIndex !== -1 ? href.substring(protocolIndex + 3) : href; // eslint-disable-next-line

  var _withoutProtocol$spli = withoutProtocol.split('/').filter(Boolean),
      host = _withoutProtocol$spli[0],
      parts = _withoutProtocol$spli.slice(1);

  pathname = "/" + (parts.join('/') || host);

  if (pathname.split('#').length === 2) {
    var _pathname$split = pathname.split('#');

    pathname = _pathname$split[0];
    hash = _pathname$split[1];
  }

  if (pathname.split('?').length === 2) {
    var _pathname$split2 = pathname.split('?');

    pathname = _pathname$split2[0];
    search = _pathname$split2[1];
  }

  var query = parseQs(search) || {};
  return {
    hash: hash,
    host: host,
    query: query,
    search: search ? "?" + search : search,
    href: href.replace(/\/$/, ''),
    pathname: pathname.replace(/\/$/, '')
  };
}

function getFullRedirectPath(redirectQueryParamName, redirectPath, allowRedirectBack, location) {
  var _ref;

  if (!redirectPath) return ''; // eslint-disable-next-line no-undef

  var redirectLoc = parseUrl(redirectPath);
  var qsRaw = location ? "" + (location.pathname || '') + (location.search || '') + (location.hash || '') : '';
  var query = allowRedirectBack && qsRaw ? (_ref = {}, _ref[redirectQueryParamName || 'redirect'] = qsRaw, _ref) : {};
  var qs = stringify(_objectSpread({}, query, redirectLoc.query));
  return "" + (redirectLoc.pathname || '') + (redirectLoc.hash || '') + (qs ? "?" + qs : '');
}

function validateStringOrFunction(val, name) {
  if (name === void 0) {
    name = 'prop';
  }

  if (typeof val === 'string') {
    return function (p) {
      return p && p[val];
    };
  } else if (typeof val === 'function') {
    return val;
  } else {
    throw new Error(name + " must be either a string or a function");
  }
}

function validateBoolOrFunction(val, name) {
  if (name === void 0) {
    name = 'prop';
  }

  if (typeof val === 'boolean') {
    return function () {
      return val;
    };
  } else if (typeof val === 'function') {
    return val;
  } else {
    throw new Error(name + " must be either a bool or a function");
  }
}